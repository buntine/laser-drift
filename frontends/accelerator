#! /usr/bin/env python

import curses
import socket
import sys

"""A curses GUI for controlling and vizualizing a slotcar via Laser Drift."""

BLOCKSIZE = 6
MAX_SPEED = 15

if len(sys.argv) < 4:
    print("Usage: accelerator player [host=localhost] [port=8099]")

host = sys.argv[2]
port = int(sys.argv[3])
state = {
    "player": int(sys.argv[1]),
    "started": False,
    "speed": 0,
    "lanechange": False,
}

def init_gradient():
    gradient = [48, 47, 82, 118, 154, 190, 220, 208, 202, 196, 160, 124, 88, 88, 52, 52]

    for i, c in enumerate(gradient):
        curses.init_pair(i + 1, 232, c)

def background(stdscr):
    curses.init_pair(17, 0, 236)
    stdscr.bkgdset(" ", curses.color_pair(17))

def block(stdscr, x, y, n, speed):
    """Render a block to the window..."""
    for l in range(0, 3):
        if n == speed and l == 1:
            content = str(n + 1).zfill(2)
        else:
            content = ""

        color = curses.color_pair(18 if n > speed else (n + 1))

        stdscr.addstr(y + l,
                      x + (n * BLOCKSIZE),
                      content.center(BLOCKSIZE),
                      color)

def toggle(stdscr, x, y, name, on=False):
    """Render an on/off toggle to the window."""
    for n in range(0, 3):
        stdscr.addstr(y + n, x, "".rjust(BLOCKSIZE * 2), curses.color_pair(18))

    for n in range(0, 3):
        content = name if n == 1 else ""
        offset = BLOCKSIZE if on else 0
        stdscr.addstr(y + n, x + offset, content.center(BLOCKSIZE), curses.color_pair(19))

def render(stdscr, x, y, state):
    stdscr.clear()

    for n in range(0, MAX_SPEED + 1):
        block(stdscr, x, y, n, state["speed"])

    toggle(stdscr, x, y + 5, "RACE", state["started"])
    toggle(stdscr, x + 16, y + 5, "LC", state["lanechange"])

def connect():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.connect((host, port))

    return sock

def close(sock):
    if sock:
        sock.shutdown(socket.SHUT_RDWR)
        sock.close()

def send(sock, c, attempt=1):
    if attempt > 2:
        raise ConnectionRefusedError()
    else:
        sock.sendall(bytes(c, "utf-8"))
        resp = sock.recv(256)

        # Re-establish connection.
        if len(resp) == 0:
            close()
            sock = connect()
            return send(sock, c, attempt+1)

    return sock

def command(stub):
    return "p%d%s" % (state["player"], stub)

def up(ch):
    if ch == curses.KEY_UP and state["speed"] < MAX_SPEED:
        state["speed"] += 1

        return command("s%d" % state["speed"])

def down(ch):
    if ch == curses.KEY_DOWN and state["speed"] > 0:
        state["speed"] -= 1

        return command("s%d" % state["speed"])

def exact(ch):
    if ch > 48 and ch < 58: # 1 - 9
        state["speed"] = ch - 49
    elif ch > 96 and ch < 103: # a - f
        state["speed"] = ch - 87
    elif ch == 48: # 0
        state["speed"] = 9
    else:
        return None

    return command("s%d" % state["speed"])

def start(ch):
    if ch == 10: # ENTER
        state["started"] = not state["started"]
        
        return "start" if state["current"] else "stop"

def lanechange(ch):
    if ch == 32: # SPACE
        state["lanechange"] = not state["lanechange"]

        return command("l1" if state["lanechange"] else "l0")

def main(stdscr):
    init_gradient()
    background(stdscr)

    curses.curs_set(0)
    curses.init_pair(18, 0, 246)
    curses.init_pair(19, 0, 254)

    stdscr.clear()

    x = int(curses.COLS / 2) - (BLOCKSIZE * 8)
    y = int(curses.LINES / 2) - 1
    sock = None
    commands = [up, down, exact, start, lanechange]

    render(stdscr, x, y, state)

    try:
        sock = connect()

        while True:
            ch = stdscr.getch()

            if ch == 113: #q
                break

            for f in commands:
                cmd = f(ch)

                if cmd:
                    sock = send(sock, cms)
                    render(stdscr, x, y, state)
                    break
    finally:
        close(sock)

try:
    curses.wrapper(main)
except ConnectionRefusedError:
    print("Cannot connect to %s:%d" % (host, port))

